@startuml

TodoListApplication -right- ItemListController
ItemListController -- AddItemController
ItemListController -- EditItemController
ItemListController -- ItemList
AddItemController -right- ItemList
EditItemController -right- ItemList
ItemList -- Item
ItemListController -right- ListFont

class TodoListApplication {
    main(String[])
    void: start(Stage)
    Parent: root
    Scene: scene
    JMetro: jmetro
}

class ItemList {

-ArrayList<Item>: toDoList

+ItemList()

+void: addItem(String,String,String)
+Item: getItem(String)
+boolean: itemExists(String)
+void removeItem(String)
+void: editItem(String,String,String,String)
+void: clearAllItems()
+void: setItemCompletedState(String, boolean)
+List<Item>: getToDoList()

}

class Item {
-String: itemName
-String: dueDate
-String: itemDescription
-boolean: completed

+Item(String String,String,boolean)

+String: getItemName()
+void: setItemName(String)
+String: getDueDate()
+void: setDueDate(String)
+String: getItemDescription()
+void: setItemDescription(String)
+boolean: getCompleted()
+void: setCompleted(boolean)

+String: toString()
}

class ItemListController {
-ItemList: itemList
-Stage: stage
-ObservableList<Item>: list
-FileChooser: fileChooser

-TextField: ItemDateTextField
-TextArea: ItemDescriptionTextField
-TextField: ItemNameTextField
-Button: sortListButton
-Button: addItemButton
-Button: closeButton
-Button: clearItemsButton
-CheckBox: completedCheckBox
-ToggleGroup: completedToggleGroup
-Button: editSelectedItemButton
-ListView<Item>: itemsListView
-Button: removeSelectedItemButton
-RadioButton: showAllItemsRadioButton
-RadioButton: showCompleteItemsRadioButton
-RadioButton: showIncompleteItemsRadioButton
-Button: exportFileButton
-Button: importFileButton

+void: itemListDataPass(ItemList)
+void: exportToFile(ActionEvent)
+void: importFromFile(ActionEvent)
+void: addNewItem(ActionEvent)
+void changeCompletedState(ActionEvent)
+void: closeList(ActionEvent)
+void: editSelectedItem(ActionEvent)
+void: sortListByDate(ActionEvent)
+void: sortList()
+void: removeSelectedItem(ActionEvent)
+void: resetItemValues()
+void: selectItemsToShow(ActionEvent)
+void: showIncompleteItems()
+void: showCompletedItems()
+void: showAllItems()
+ObservableList<Item>: getList()
+void: clearAllItems(ActionEvent)
+void: initialize()
+void: fillListView()
+void: openFile(File)
+void: saveFile(String)
}

class AddItemController {
-ItemList: itemList
-DatePicker: newDatePickerField
-TextArea: newDescriptionTextField
-TextField: newNameTextField
-Button: saveItemButton

+void: itemListDataPass(ItemList, HostServices)
+void: saveItem(ActionEvent)
+void: transitionToItemList(ActionEvent)
+boolean: descriptionFieldMaxValidation(String)
+boolean: isDescriptionFieldEmpty(String)
+boolean: isNameFieldUnique(String)
+boolean: isNameFieldEmpty(String)
+void: initialize()
+void setHostServices(HostServices)
}

class EditItemController {
-String: itemName
-ItemList: itemList
-DatePicker: newDatePickerField
-TextArea: newDescriptionTextField
-TextField: newNameTextField
-Button: saveChangesButton

+EditItemController()

+void: editItemValues(ActionEvent)
+void: transitionToItemList(ActionEvent)
+boolean: descriptionFieldMaxValidation(String)
+boolean: isDescriptionFieldEmpty(String)
+boolean: isNameFieldUnique(String)
+boolean: isNameFieldEmpty(String)
+void: initialize()
+void: itemListDataPass(ItemList, String, HostServices)
+void: setStageTexts()
}

class ListFont {
-Label: label

+ListFont()

+void: updateItem(Item,boolean)
}

@enduml